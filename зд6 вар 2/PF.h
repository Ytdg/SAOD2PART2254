#pragma once

#include <iostream>

using namespace std;

// Класс префикс-функции
class PF {
public:
    int* pv; // Указатель на динамический массив для хранения значений префикс-функции
    int n; // Длина строки, для которой вычисляется префикс-функция
    int cmpCount; // Счетчик сравнений символов для анализа сложности алгоритма

    // Конструктор, принимающий строку и инициализирующий префикс-функцию
    PF(const char* string) {
        cmpCount = 0;
        Init(string);
    }

    // Деструктор, освобождающий динамическую память, выделенную для массива
    ~PF() {
        delete[] pv;
    }

    //  Конструктор копирования
    PF(const PF& other) {
        n = other.n;
        pv = new int[n];
        memcpy(pv, other.pv, n * sizeof(int));
        cmpCount = other.cmpCount;
    }

    //  Реализации оператора присваивания
    PF& operator=(const PF& other) {
        if (this != &other) {
            delete[] pv;
            n = other.n;
            pv = new int[n];
            memcpy(pv, other.pv, n * sizeof(int));
            cmpCount = other.cmpCount;
        }
        return *this;
    }

    // Оператор преобразования типа для получения длины строки
    operator int() const {
        return n;
    }

    // Оператор индексации для получения значения префикс-функции по индексу
    int operator[](int i) const {
        if (i >= n || i < 0) throw out_of_range("Index out of range"); // Проверка выхода индекса за границы
        return *(pv + i); // Возвращает значение префикс-функции для данного индекса
    }

    // Метод для получения количества сравнений символов
    int CmpCount() {
        return cmpCount;
    }

private:
    // Метод для инициализации префикс-функции
    void Init(const char* string) {
        n = strlen(string); // Вычисление длины строки
        pv = new int[n]; // Выделение динамической памяти для массива префикс-функции

        *pv = 0; // Первое значение префикс-функции всегда равно 0

        for (int i = 1; i < n; i++) {
            int j = pv[i - 1]; // Начальное значение для поиска наибольшего совпадающего префикса/суффикса

            // Поиск наибольшего совпадающего префикса/суффикса
            while (j > 0 && string[i] != string[j]) {
                j = pv[j - 1]; // Переход к предыдущему значению префикс-функции
                cmpCount++; // Увеличение счетчика сравнений символов
            }

            // Если найдено совпадение символов, увеличиваем значение префикс-функции
            if (string[i] == string[j]) j++;

            pv[i] = j; // Сохранение значения префикс-функции для текущего индекса
        }
    }
};